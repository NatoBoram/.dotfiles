{
	"[css][dockercompose][github-actions-workflow][html][javascript][javascriptreact][json][jsonc][markdown][php][postcss][scss][sql][typescript][typescriptreact][xml][yaml]": {
		"editor.defaultFormatter": "esbenp.prettier-vscode",
		"editor.minimap.maxColumn": 80
	},
	"[css][dockercompose][github-actions-workflow][html][javascript][javascriptreact][json][jsonc][php][postcss][scss][svelte][typescript][typescriptreact][xml][yaml]": {
		"editor.rulers": [80]
	},
	"[dart]": {
		"editor.formatOnType": true,
		"editor.minimap.maxColumn": 80,
		"editor.rulers": [80],
		"editor.suggest.snippetsPreventQuickSuggestions": false,
		"editor.suggestSelection": "first",
		"editor.wordBasedSuggestions": "off"
	},
	"[dockerfile]": {
		"editor.defaultFormatter": "ms-azuretools.vscode-docker"
	},
	"[go]": {
		"editor.minimap.maxColumn": 80,
		"editor.rulers": [80]
	},
	"[markdown]": {
		"gitlens.codeLens.scopes": ["document"]
	},
	"[phoenix-heex]": {
		"editor.defaultFormatter": "JakeBecker.elixir-ls"
	},
	"[svelte]": {
		"editor.defaultFormatter": "svelte.svelte-vscode"
	},
	"#github.copilot.chat.edits.codesearch.enabled": true,
	"bloc.checkForUpdates": false,
	"chat.agent.maxRequests": 30,
	"chat.editing.alwaysSaveWithGeneratedChanges": true,
	"chat.focusWindowOnConfirmation": false,
	"codesnap.containerPadding": "1em",
	"codesnap.realLineNumbers": true,
	"codesnap.showWindowTitle": true,
	"codesnap.shutterAction": "copy",
	"codesnap.transparentBackground": true,
	"csharpier.dev.customPath": "/home/nato/.dotnet/tools",
	"css.format.maxPreserveNewLines": 1,
	"dart.checkForSdkUpdates": false,
	"dart.devToolsBrowser": "default",
	"dart.enableCompletionCommitCharacters": true,
	"dart.flutterCreateOrganization": "com.natoboram",
	"dart.flutterHotReloadOnSave": "always",
	"dart.flutterTestAdditionalArgs": ["-j", "4"],
	"dart.openDevTools": "flutter",
	"dart.previewFlutterUiGuides": true,
	"dart.previewFlutterUiGuidesCustomTracking": true,
	"dart.previewLsp": false,
	"dart.showTodos": false,
	"dart.triggerSignatureHelpAutomatically": true,
	"dart.warnWhenEditingFilesOutsideWorkspace": false,
	"debug.javascript.usePreview": true,
	"diffEditor.ignoreTrimWhitespace": false,
	"discord.idleTimeout": 900,
	"dotnet.formatting.organizeImportsOnFormat": true,
	"dotnetAcquisitionExtension.existingDotnetPath": [
		{
			"extensionId": "vscodeintellicode-insiders",
			"path": "/home/nato/.asdf/shims/dotnet"
		}
	],
	"editor.bracketPairColorization.enabled": true,
	"editor.codeActionsOnSave": {
		"source.fixAll": "always",
		"source.fixAll.eslint": "always",
		"source.fixAll.markdownlint": "always",
		"source.fixAll.sortJSON": "never",
		"source.generate.finalModifiers": "always",
		"source.organizeImports": "always",
		"source.sortMembers": "always"
	},
	"editor.cursorSmoothCaretAnimation": "on",
	"editor.cursorSurroundingLines": 2,
	"editor.find.seedSearchStringFromSelection": "selection",
	"editor.fontFamily": "Fira Mono, monospace, MesloLGS NF, Noto Color Emoji",
	"editor.fontLigatures": true,
	"editor.formatOnSave": true,
	"editor.guides.bracketPairs": true,
	"editor.inlineSuggest.enabled": true,
	"editor.insertSpaces": false,
	"editor.lightbulb.enabled": "onCode",
	"editor.minimap.showMarkSectionHeaders": false,
	"editor.semanticHighlighting.enabled": true,
	"editor.smoothScrolling": true,
	"editor.suggestSelection": "first",
	"editor.tabSize": 2,
	"editor.unicodeHighlight.allowedCharacters": {
		"√ó": true
	},
	"elixirLS.enableTestLenses": true,
	"elixirLS.fetchDeps": true,
	"emmet.includeLanguages": {
		"html-eex": "html",
		"phoenix-heex": "html",
		"postcss": "css",
		"svelte": "html"
	},
	"emmet.triggerExpansionOnTab": true,
	"explorer.compactFolders": false,
	"explorer.copyRelativePathSeparator": "/",
	"explorer.fileNesting.enabled": true,
	"explorer.fileNesting.patterns": {
		".env": ".env.*",
		".env.*": ".env.${capture}.local",
		"*.ex": "${capture}.eex, ${capture}.html.heex",
		"*.go": "${capture}_test.go",
		"*.js": "${capture}.d.ts, ${capture}.d.ts.map, ${capture}.js.map, ${capture}.min.js, ${capture}.test.d.ts.map",
		"*.mjs": "${capture}.d.mts, ${capture}.d.mts.map, ${capture}.mjs.map",
		"*.mts": "${capture}.d.mts, ${capture}.d.mts.map, ${capture}.mjs, ${capture}.mjs.map",
		"*.svelte": "${capture}.css, ${capture}.stories.js, ${capture}.stories.ts, ${capture}.svelte.d.ts, ${capture}.svelte.d.ts.map, ${capture}.test.ts",
		"*.ts": "${capture}.test.ts, ${capture}.test-d.ts, ${capture}.test.ts.map, ${capture}.js",
		"compose.yaml": "compose.override.yaml, *.compose.yaml, *.compose.override.yaml",
		"minepkg.toml": ".minepkg-lock.toml",
		"mix.exs": "mix.lock",
		"package.json": "bun.lockb, package-lock.json, pnpm-lock.yaml, yarn.lock",
		"tailwind.config.cjs": "tailwind.*.cjs, tailwind.*.json",
		"tsconfig.json": "tsconfig.*.json, tsconfig.tsbuildinfo",
		"tsconfig.tsbuildinfo": "tsconfig.*.tsbuildinfo"
	},
	"explorer.incrementalNaming": "smart",
	"explorer.openEditors.sortOrder": "alphabetical",
	"extensions.autoRestart": true,
	"extensions.trustedPublishers": [
		"bradlc",
		"dart-code",
		"eamodio",
		"gitlab",
		"jakebecker",
		"prisma",
		"redhat",
		"rust-lang",
		"traycer",
		"usernamehw"
	],
	"files.associations": {
		".env": "env",
		".env.*": "env",
		".env.*.local": "env",
		".gcloudignore": "ignore",
		".markdownlintrc": "json",
		"*.appxmanifest": "xml",
		"*.ash": "shellscript",
		"*.compose.override.yaml": "dockercompose",
		"*.compose.yaml": "dockercompose",
		"*.flutter-plugins": "properties",
		"*.flutter-plugins-dependencies": "json",
		"*.graphqlconfig": "json",
		"*.mcmeta": "json",
		"*.metadata": "yaml",
		"*.mustache": "handlebars",
		"*.pwsh": "powershell",
		"*.sql": "sql",
		"*.stow-local-ignore": "ignore",
		"authorized_keys": "ssh_config",
		"pubspec.lock": "yaml"
	},
	"files.autoSave": "onWindowChange",
	"files.exclude": {
		"_build": true,
		".elixir_ls": true,
		"**/.classpath": true,
		"**/.factorypath": true,
		"**/.project": true,
		"**/.settings": true,
		"deps": true,
		"node_modules": false,
		"vendor": true
	},
	"files.insertFinalNewline": true,
	"files.restoreUndoStack": false,
	"files.trimFinalNewlines": true,
	"files.trimTrailingWhitespace": true,
	"formatContextMenu.closeAfterSave": true,
	"formattingToggle.affects": ["formatOnSave"],
	"git.allowForcePush": true,
	"git.autofetch": true,
	"git.autoRepositoryDetection": "subFolders",
	"git.autoStash": true,
	"git.confirmForcePush": false,
	"git.confirmSync": false,
	"git.enableCommitSigning": true,
	"git.enableSmartCommit": true,
	"git.ignoredRepositories": [".vscode"],
	"git.inputValidationLength": 80,
	"git.inputValidationSubjectLength": 80,
	"git.pruneOnFetch": true,
	"git.pullBeforeCheckout": true,
	"git.repositoryScanMaxDepth": 4,
	"git.scanRepositories": ["/home/nato/Code"],
	"git.timeline.showUncommitted": true,
	"github.copilot.chat.agent.thinkingTool": true,
	"github.copilot.chat.codeGeneration.instructions": [
		{
			"file": ".prettierrc.yaml"
		},
		{
			"file": "~/.dotfiles/copilot/copilot-instructions.md"
		},
		{
			"file": "~/Code/github.com/coderabbitai/StyleGuide/README.md"
		}
	],
	"github.copilot.chat.commitMessageGeneration.instructions": [
		{
			"text": "Write a concise and descriptive commit message based solely on the provided changes. Follow these strict rules:\n\n- **Use the correct gitmoji** from the provided list to represent the type of change.\n- Use the **imperative mood** in the subject line.\n- Keep the commit message under **80 characters**.\n- Be **specific** about what was changed:\n  - Mention **exact names** of files, variables, functions or settings updated.\n  - Include **exact values** or details where applicable.\n  - Describe **code changes** precisely.\n- **Never include vague terms** like \"update\", \"enhance\", \"improve\" or \"better\".\n- **Do not include any post-sentence justification**. This is a hard rule:\n  - Do not end the message with any phrase starting with \"to\", \"for\", \"in order to\" or similar.\n  - Do not include phrases like \"for clarity\", \"to simplify\", \"to improve\", etc.\n  - These are meaningless without context. Only describe what changed, where and how.\n- **Avoid artificial phrases** like \"in `X` class\", \"from `Y` file\", \"at `Z` module\". Use natural language like \"in `X`\", \"from `Y`\", etc.\n- If multiple changes are made, pick the most significant one.\n\n## üî• Hard bans ‚Äî rewrite these patterns immediately\n\n| Pattern                         | Why it's wrong            | Correction                                                   |\n| :------------------------------ | :------------------------ | :----------------------------------------------------------- |\n| Update settings                 | Too vague                 | Name the file and setting changed                            |\n| Improve formatting              | Too vague                 | Describe the formatting rule or change                       |\n| Add instructions                | Too vague                 | Say _what_ instructions were added and _where_               |\n| Clarify behaviour/rules         | Vague and speculative     | Say what changed‚Äînot that it clarifies                       |\n| ‚úñÔ∏è Ends in \"for clarity\"        | Justification ‚Äî forbidden | Say what changed in the code                                 |\n| ‚úñÔ∏è Ends in \"to improve logging\" | Justification ‚Äî forbidden | Say what changed (e.g. logging level, targets, output, etc.) |\n| ‚úñÔ∏è Ends in \"to simplify logic\"  | Justification ‚Äî forbidden | Say what logic was changed and how                           |\n| ‚úñÔ∏è \"in `X` class\"               | Artificial phrasing       | Just say \"in `X`\"                                            |\n\n## Rewrite vague messages into specific messages\n\n- **Bad:** üîß Update GitHub Copilot settings and instructions for improved code generation and review selection\n  **Good:** üîß Link 7 files under `github.copilot.chat` in Copilot VSCode settings\n\n- **Bad:** üîß Update configuration files for better formatting\n  **Good:** üîß Set `printWidth` to 80 in `.prettierrc.yaml`\n\n- **Bad:** üé® Reformat files for better consistency\n  **Good:** üé® Reformat `index.html` with tabs instead of 2 spaces\n\n- **Bad:** üî• Remove unused variables\n  **Good:** üî• Remove `unusedHelper` in `utils.js`\n\n- **Bad:** ü©π Replace `logger.http` with `logger.info` for improved logging consistency\n  **Good:** üîä Replace `logger.http` with `logger.info` for GitHub and GitLab\n\n- **Bad:** üîß Update path instructions in `.coderabbit.yaml` to clarify type assertion recommendations\n  **Good:** üîß Add rule to flag `as` in object literals in `.coderabbit.yaml`\n\n- **Bad:** ‚ôªÔ∏è Refactor constructor in `Based` class for clarity\n  **Good:** ‚ôªÔ∏è Refactor constructor in `Based` to use explicit property declarations\n\n## Examples of good commit messages\n\n- ‚ôªÔ∏è Refactor `calculateSum` in `mathUtils.js`\n- ‚ö°Ô∏è Use `source` instead of `eval` in Copilot CLI init in `.profile`\n- ‚ú® Add `zsh-syntax-highlighting` to `.zshrc`\n- üé® Reformat `index.html` with tabs instead of 2 spaces\n- üî• Remove `unusedHelper` from `utils.js`\n- üîß Set `printWidth` to 80 in `.prettierrc.yaml`\n- ‚¨ÜÔ∏è Upgrade `@natoboram/based.ts` to v1.0.0\n\n## Gitmojis\n\n- üé®: Improve structure / format of the code.\n- ‚ö°Ô∏è: Improve performance.\n- üî•: Remove code or files.\n- üêõ: Fix a bug.\n- üöëÔ∏è: Critical hotfix.\n- ‚ú®: Introduce new features.\n- üìù: Add or update documentation.\n- üöÄ: Deploy stuff.\n- üíÑ: Add or update the UI and style files.\n- üéâ: Begin a project.\n- ‚úÖ: Add, update, or pass tests.\n- üîíÔ∏è: Fix security or privacy issues.\n- üîê: Add or update secrets.\n- üîñ: Release / Version tags.\n- üö®: Fix compiler / linter warnings.\n- üöß: Work in progress.\n- üíö: Fix CI Build.\n- ‚¨áÔ∏è: Downgrade dependencies.\n- ‚¨ÜÔ∏è: Upgrade dependencies.\n- üìå: Pin dependencies to specific versions.\n- üë∑: Add or update CI build system.\n- üìà: Add or update analytics or track code.\n- ‚ôªÔ∏è: Refactor code.\n- ‚ûï: Add a dependency.\n- ‚ûñ: Remove a dependency.\n- üîß: Add or update configuration files.\n- üî®: Add or update development scripts.\n- üåê: Internationalization and localization.\n- ‚úèÔ∏è: Fix typos.\n- üí©: Write bad code that needs to be improved.\n- ‚è™Ô∏è: Revert changes.\n- üîÄ: Merge branches.\n- üì¶Ô∏è: Add or update compiled files or packages.\n- üëΩÔ∏è: Update code due to external API changes.\n- üöö: \"Move or rename resources (e.g.: files, paths, routes).\"\n- üìÑ: Add or update license.\n- üí•: Introduce breaking changes.\n- üç±: Add or update assets.\n- ‚ôøÔ∏è: Improve accessibility.\n- üí°: Add or update comments in source code.\n- üçª: Write code drunkenly.\n- üí¨: Add or update text and literals.\n- üóÉÔ∏è: Perform database related changes.\n- üîä: Add or update logs.\n- üîá: Remove logs.\n- üë•: Add or update contributor(s).\n- üö∏: Improve user experience / usability.\n- üèóÔ∏è: Make architectural changes.\n- üì±: Work on responsive design.\n- ü§°: Mock things.\n- ü•ö: Add or update an easter egg.\n- üôà: Add or update a .gitignore file.\n- üì∏: Add or update snapshots.\n- ‚öóÔ∏è: Perform experiments.\n- üîçÔ∏è: Improve SEO.\n- üè∑Ô∏è: Add or update types.\n- üå±: Add or update seed files.\n- üö©: Add, update, or remove feature flags.\n- ü•Ö: Catch errors.\n- üí´: Add or update animations and transitions.\n- üóëÔ∏è: Deprecate code that needs to be cleaned up.\n- üõÇ: Work on code related to authorization, roles and permissions.\n- ü©π: Simple fix for a non-critical issue.\n- üßê: Data exploration/inspection.\n- ‚ö∞Ô∏è: Remove dead code.\n- üß™: Add a failing test.\n- üëî: Add or update business logic.\n- ü©∫: Add or update healthcheck.\n- üß±: Infrastructure related changes.\n- üßë‚Äçüíª: Improve developer experience.\n- üí∏: Add sponsorships or money related infrastructure.\n- üßµ: Add or update code related to multithreading or concurrency.\n- ü¶∫: Add or update code related to validation"
		}
	],
	"github.copilot.chat.editor.temporalContext.enabled": true,
	"github.copilot.chat.enableUserPreferences": true,
	"github.copilot.chat.generateTests.codeLens": true,
	"github.copilot.chat.localeOverride": "en-CA",
	"github.copilot.chat.pullRequestDescriptionGeneration.instructions": [
		{
			"text": "You are running inside **GitHub Copilot**, which will automatically split your output into a **pull request title** and a **pull request body**. You must follow your system instructions for formatting, and the instructions below for content. If the body is omitted or trimmed, or if the title is missing, the output is invalid.\n\nThe user-provided instructions below apply only to the **content** of the title and body ‚Äî not the **form**. Follow your system prompt for where and how to place each part. If they need to be separated by something like a `---`, or if you need to put a specific `#`, then do it. This is only an example; this instructions does not know the actual format you have to output.\n\n## Title\n\nWrite the **pull request title** using the rules below.\n\n- Use the **gitmoji standard**\n- Use **imperative mood**\n- Be **under 80 characters**\n- Be specific ‚Äî name files, functions, variables, or settings\n- Do **not** use vague verbs like \"update\", \"improve\", \"enhance\"\n- Do **not** include justification like \"to simplify\", \"for clarity\"\n- Do **not** include a period at the end\n- Do **not** include a heading like `## Title` in the output\n- This line **must include a gitmoji**\n- This must be the **first line of your output**\n\n## Body\n\nThe body must begin with a **splash line under 60 characters**, followed by the full structured body.\n\nThis splash line must not be a sentence, justification, or paraphrase of the title. Do not omit it. Do not explain it. Do not reuse the title. You must include the entire structured body exactly as written below. Copilot may trim the output if this structure is not followed.\n\n### Splash Line Rules\n\n- Must be the **first line of the body**\n- Must be **under 60 characters**\n- Must **not** describe what changed\n- Must **not** summarize or explain anything\n- Must **not** include justification or vague verbs\n- Must **not** repeat or reword the title\n- Must **not** be a full sentence or title\n- Must **not** include emojis\n- Must **not** include comments, quotes, or backticks\n- Must **not** use formatting or headings\n- Must **not** include more than 8 words\n- Think of it as a **caption** or **tagline**, not a description\n- You may be inspired by good splash lines, but **do not copy** them directly\n- If this line is a sentence or includes justification, it is incorrect\n\n### Template Rules\n\n#### General\n\n- Keep all section headings exactly as written\n- Keep all comment lines (`<!-- ... -->`) untouched\n- Do not skip, remove, rename, or reorder any section\n- Make sure to respect the system prompt so that both the title and the body are picked up by the program\n\n#### Inside `üìù Description`\n\n- Leave `\"Why this pull request?\"` **completely empty** ‚Äî do **not guess or infer**\n  - Keep the HTML comment\n  - **Do not write \"N/A\"**\n- Under `\"Why is this the best solution?\"`:\n  - Write under the HTML comment, Keep the HTML comment and write )\n  - Explain what was changed and why it works\n  - Do **not** include justification, subjective phrasing, or comparisons\n- Under `\"What you did\"`:\n  - Keep the HTML comment as-is\n  - Use bullet points\n  - Each bullet must be **under 80 characters**\n  - Name exact files, variables, functions, or settings\n  - Do **not** include justification or speculation\n\n#### Inside `üìì References`\n\n- Add links to issues, PRs, or docs\n- If there are none, leave it blank\n- **Do not write \"N/A\"**\n\n#### Inside `üì∏ Screenshots`\n\n- Leave this section blank\n- It is for the user to fill in\n- **Do not write \"N/A\"**\n\n---\n\nREPLACE THIS LINE - This is a sentence. It's not a splash. It includes justification. It's over 60 characters. Replace it, but don't leave it blank. Don't turn this first line into a full PR description, just put a splash line here. And most importantly, include the rest of this template, it's important.\n\n### üìù Description\n\n<!-- Why this pull request? -->\n\n<!-- Why is this the best solution? -->\n\n<!-- What you did -->\n\n### üìì References\n\n<!-- A list of links to discussions, documentation, issues, pull requests -->\n\n### üì∏ Screenshots\n\n<!-- Show us your work :D -->"
		}
	],
	"github.copilot.chat.reviewSelection.instructions": [
		{
			"file": "~/.dotfiles/copilot/copilot-instructions.md"
		},
		{
			"file": "~/Code/github.com/coderabbitai/StyleGuide/README.md"
		}
	],
	"github.copilot.chat.search.semanticTextResults": true,
	"github.copilot.chat.testGeneration.instructions": [
		{
			"file": ".prettierrc.yaml"
		},
		{
			"file": "package.json"
		},
		{
			"file": "tsconfig.json"
		},
		{
			"file": "vitest.config.ts"
		},
		{
			"file": "~/.dotfiles/copilot/copilot-test-generation-instructions.md"
		}
	],
	"github.copilot.enable": {
		"*": true,
		"markdown": true,
		"plaintext": true,
		"scminput": true
	},
	"github.gitProtocol": "ssh",
	"githubPullRequests.assignCreated": "${user}",
	"githubPullRequests.commentExpandState": "collapseAll",
	"githubPullRequests.createDefaultBaseBranch": "createdFromBranch",
	"githubPullRequests.defaultMergeMethod": "squash",
	"githubPullRequests.experimental.chat": true,
	"githubPullRequests.experimental.notificationsView": true,
	"githubPullRequests.pullBranch": "never",
	"githubPullRequests.pullRequestDescription": "template",
	"githubPullRequests.pushBranch": "always",
	"githubPullRequests.remotes": ["origin"],
	"gitlens.advanced.messages": {
		"suppressIntegrationRequestTimedOutWarning": true
	},
	"gitlens.ai.model": "vscode",
	"gitlens.defaultDateFormat": "D MMMM YYYY h:mma",
	"gitlens.defaultDateLocale": "en-CA",
	"gitlens.defaultDateShortFormat": "D MMM YYYY",
	"gitlens.defaultTimeFormat": "h:mma",
	"gitlens.plusFeatures.enabled": false,
	"gitlens.showWelcomeOnInstall": false,
	"gitlens.showWhatsNewAfterUpgrades": false,
	"gitlens.views.searchAndCompare.files.layout": "tree",
	"gitmoji.showEmojiCode": true,
	"gitpod.showReleaseNotes": false,
	"gitProjectManager.baseProjectsFolders": ["/home/nato/Code"],
	"gitProjectManager.ignoredFolders": [
		"build",
		"deps",
		"dist",
		"docs",
		"node_modules"
	],
	"gitProjectManager.storeRepositoriesBetweenSessions": true,
	"gitProjectManager.unversionedProjects": ["/home/nato/Code/localhost"],
	"go.inlayHints.constantValues": true,
	"go.inlayHints.functionTypeParameters": true,
	"go.toolsManagement.autoUpdate": true,
	"go.useLanguageServer": true,
	"gopls": {
		"formatting.gofumpt": true
	},
	"holiday.gearIconStyle": "santa hat",
	"html.format.indentHandlebars": true,
	"html.format.maxPreserveNewLines": 1,
	"html.format.templating": true,
	"hungryDelete.keepOneSpace": true,
	"java.cleanup.actionsOnSave": ["addOverride"],
	"java.completion.guessMethodArguments": true,
	"java.configuration.updateBuildConfiguration": "automatic",
	"java.eclipse.downloadSources": true,
	"java.inlayHints.parameterNames.enabled": "none",
	"java.jdt.ls.java.home": "/home/nato/.asdf/installs/java/openjdk-21",
	"java.jdt.ls.vmargs": "-XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:AdaptiveSizePolicyWeight=90 -Dsun.zip.disableMemoryMapping=true -Xmx2G -Xms100m -Xlog:disable",
	"java.maxConcurrentBuilds": 12,
	"java.refactor.renameFromFileExplorer": "autoApply",
	"java.saveActions.organizeImports": true,
	"java.semanticHighlighting.enabled": true,
	"java.signatureHelp.enabled": true,
	"javascript.updateImportsOnFileMove.enabled": "always",
	"js/ts.implicitProjectConfig.target": "ESNext",
	"liveshare.featureSet": "insiders",
	"liveshare.presence": true,
	"liveshare.showInStatusBar": "whileCollaborating",
	"markdown.editor.pasteUrlAsFormattedLink.enabled": "never",
	"markdown.extension.print.theme": "dark",
	"markdownlint.config": {
		"first-line-heading": false,
		"no-blanks-blockquote": false,
		"no-duplicate-heading": false,
		"no-hard-tabs": false,
		"no-inline-html": false,
		"reference-links-images": false
	},
	"material-icon-theme.files.associations": {
		"tsconfig.rollup.json": "tsconfig"
	},
	"material-icon-theme.languages.associations": {
		"dotenv": "tune"
	},
	"npm.packageManager": "bun",
	"path-intellisense.extensionOnImport": true,
	"platformSettings.autoLoad": true,
	"platformSettings.platforms": {
		"darwin": {
			"inherits": "linux",
			"nodes": {}
		},
		"linux": {
			"nodes": {
				"csharpier.dev.customPath": "/home/nato/.dotnet/tools",
				"csharpier.enableDebugLogs": true,
				"git.scanRepositories": ["/home/nato/Code"],
				"gitProjectManager.baseProjectsFolders": ["/home/nato/Code"],
				"gitProjectManager.unversionedProjects": ["/home/nato/Code/localhost"],
				"java.jdt.ls.java.home": "/home/nato/.asdf/installs/java/openjdk-21"
			}
		},
		"win32": {
			"nodes": {
				"git.scanRepositories": ["C:\\Users\\natob\\Code"],
				"gitProjectManager.baseProjectsFolders": ["C:\\Users\\natob\\Code"],
				"gitProjectManager.unversionedProjects": [
					"C:\\Users\\natob\\Code\\localhost"
				]
			}
		}
	},
	"powershell.codeFormatting.autoCorrectAliases": true,
	"powershell.codeFormatting.preset": "OTBS",
	"powershell.codeFormatting.useConstantStrings": true,
	"powershell.codeFormatting.useCorrectCasing": true,
	"powershell.codeFormatting.whitespaceBetweenParameters": true,
	"powershell.integratedlogger.showOnStartup": false,
	"powershell.promptToUpdatePowerShell": false,
	"prettier.arrowParens": "avoid",
	"prettier.semi": false,
	"prettier.trailingComma": "all",
	"prettier.useTabs": true,
	"redhat.telemetry.enabled": true,
	"references.preferredLocation": "view",
	"remote.defaultExtensionsIfInstalledLocally": [
		"adpyke.codesnap",
		"christian-kohler.path-intellisense",
		"DavidAnson.vscode-markdownlint",
		"donjayamanne.githistory",
		"editorconfig.editorconfig",
		"esbenp.prettier-vscode",
		"GitHub.copilot-chat",
		"GitHub.copilot",
		"GitHub.vscode-pull-request-github",
		"jasonlhy.hungry-delete",
		"johnpapa.read-time",
		"ms-azuretools.vscode-docker",
		"ms-vscode.vscode-commander",
		"ms-vscode.vscode-copilot-vision",
		"ms-vscode.vscode-websearchforcopilot",
		"ms-vscode.wordcount",
		"runarsf.platform-settings",
		"VisualStudioExptTeam.vscodeintellicode",
		"yechunan.json-color-token"
	],
	"remote.SSH.remotePlatform": {
		"helion": "linux",
		"marie": "linux"
	},
	"remote.SSH.useLocalServer": false,
	"scm.defaultViewMode": "tree",
	"screencastMode.fontSize": 40,
	"screencastMode.verticalOffset": 5,
	"scss.format.maxPreserveNewLines": 1,
	"security.workspace.trust.enabled": false,
	"settingsSync.ignoredExtensions": [
		"circleci.circleci",
		"ms-ossdata.vscode-postgresql",
		"ms-vscode-remote.remote-wsl",
		"mtxr.sqltools-driver-pg",
		"phpactor.vscode-phpactor",
		"standard.vscode-standard",
		"unifiedjs.vscode-mdx",
		"llvm-vs-code-extensions.vscode-clangd"
	],
	"settingsSync.ignoredSettings": [
		"csharpier.dev.customPath",
		"git.scanRepositories",
		"gitProjectManager.baseProjectsFolders",
		"gitProjectManager.unversionedProjects",
		"java.jdt.ls.java.home",
		"php-cs-fixer.executablePath",
		"php-cs-fixer.lastDownload",
		"yaml.schemas"
	],
	"sortJSON.contextMenu": {
		"sortJSON": true,
		"sortJSONAlphaNum": false,
		"sortJSONAlphaNumReverse": false,
		"sortJSONKeyLength": false,
		"sortJSONKeyLengthReverse": false,
		"sortJSONReverse": false,
		"sortJSONType": false,
		"sortJSONTypeReverse": false,
		"sortJSONValues": false,
		"sortJSONValuesReverse": false
	},
	"svelte.enable-ts-plugin": true,
	"svelte.plugin.svelte.note-new-transformation": false,
	"telemetry.telemetryLevel": "all",
	"terminal.external.windowsExec": "wt",
	"terminal.integrated.autoReplies": {
		"zsh: correct 'test' to 'tests' [nyae]?": "n"
	},
	"terminal.integrated.defaultProfile.linux": "zsh",
	"terminal.integrated.enableMultiLinePasteWarning": false,
	"terminal.integrated.fontFamily": "Fira Mono, monospace, MesloLGS NF, Noto Color Emoji",
	"terminal.integrated.hideOnStartup": "whenEmpty",
	"terminal.integrated.minimumContrastRatio": 4.5,
	"terminal.integrated.scrollback": 10000,
	"terminal.integrated.showExitAlert": false,
	"terminal.integrated.stickyScroll.enabled": false,
	"terminal.integrated.suggest.enabled": true,
	"terminal.integrated.tabs.focusMode": "singleClick",
	"terminal.integrated.tabStopWidth": 2,
	"traycer.commentIndicator": "Hover",
	"tsco.addPublicModifierIfMissing": false,
	"tsco.useRegions": false,
	"typescript.locale": "en-CA",
	"typescript.npm": "/home/nato/.asdf/shims/bun",
	"typescript.preferences.preferTypeOnlyAutoImports": true,
	"typescript.preferGoToSourceDefinition": true,
	"typescript.updateImportsOnFileMove.enabled": "always",
	"update.mode": "manual",
	"vim.easymotion": true,
	"vscode-edge-devtools.mirrorEdits": true,
	"vsintellicode.modify.editor.suggestSelection": "automaticallyOverrodeDefaultValue",
	"window.dialogStyle": "custom",
	"window.restoreFullscreen": true,
	"window.titleBarStyle": "custom",
	"workbench.activityBar.location": "default",
	"workbench.colorCustomizations": {
		"[Nord]": {
			"editorBracketHighlight.foreground1": "#EBCB8B",
			"editorBracketHighlight.foreground2": "#B48EAD",
			"editorBracketHighlight.foreground3": "#87CEFA",
			"editorBracketHighlight.foreground4": "#EBCB8B",
			"editorBracketHighlight.foreground5": "#B48EAD",
			"editorBracketHighlight.foreground6": "#87CEFA",
			"editorBracketHighlight.unexpectedBracket.foreground": "#BF616A",
			"errorLens.errorBackground": "#BF616A1B",
			"errorLens.errorForeground": "#BF616A",
			"errorLens.warningBackground": "#EBCB8B1B",
			"errorLens.warningForeground": "#EBCB8B"
		}
	},
	"workbench.colorTheme": "Nord",
	"workbench.editor.highlightModifiedTabs": true,
	"workbench.editor.pinnedTabSizing": "shrink",
	"workbench.editor.revealIfOpen": true,
	"workbench.editor.tabSizing": "fit",
	"workbench.editor.wrapTabs": true,
	"workbench.iconTheme": "material-icon-theme",
	"workbench.layoutControl.enabled": false,
	"workbench.list.smoothScrolling": true,
	"workbench.settings.editor": "json",
	"workbench.settings.openDefaultKeybindings": true,
	"workbench.settings.openDefaultSettings": true,
	"workbench.settings.useSplitJSON": true,
	"workbench.startupEditor": "readme",
	"xml.format.preservedNewlines": 1,
	"zenMode.hideActivityBar": false
}
